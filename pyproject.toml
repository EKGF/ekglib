[project]
name = "ekglib"
dynamic = ["version"]
description = "A Python Library for various tasks in an EKG DataOps operation."
authors = [{ name = "Jacobus Geluk", email = "jacobus.geluk@agnos.ai" }]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
    "Natural Language :: English",
]
requires-python = ">=3.13"
dependencies = [
    "boto3-stubs",
    "boto3",
    "botocore",
    "data-science-types",
    "humps",
    "inflection",
    "ldap3",
    "mdutils",
    "mkdocs-gen-files",
    "numpy",
    "openpyxl",
    "option",
    "owlrl",
    "pandas-stubs",
    "pandas",
    "python-dateutil",
    "rdflib",
    "requests",
    "setuptools",
    "SPARQLWrapper",
    "stringcase",
    "toml",
]

[dependency-groups]
dev = [
    "black",
    "flake8>=7.1.1",
    "hatch",
    "isort",
    "mdutils",
    "mkdocs-gen-files",
    "mkdocs-material",
    "mkdocs",
    "mypy",
    "pylint",
    "pyright",
    "pytest-cov",
    "pytest-timeout>=2.3.1",
    "pytest",
    "ruff",
    "tox",
    "uv",
]

# See https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#urls
# See https://peps.python.org/pep-0753/#well-known-labels
[project.urls]
homepage = "https://github.com/ekgf/ekglib"
documentation = "https://ekgf.github.io/ekglib/"
repository = "https://github.com/ekgf/ekglib.git"

[project.scripts]
xlsx-parser = "ekglib.xlsx_parser:main"
user-story-parser = "ekglib.user_story_parser:user_story_processor"
pipeline-example = "ekglib.pipeline.example:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
# See https://docs.astral.sh/uv/concepts/projects/#configuring-project-packaging
package = true
default-groups = ["dev"]
# No need to install tools like tox or ruff here, run those via
# `uv run <tool>` or `uvx <tool>` instead.
dev-dependencies = [
    "pyright",
    "ipykernel",
    "ruff"
]
link-mode = "copy"

[tool.black]
line-length = 120
target-version = ['py312']

[tool.mypy]
files = ["src"]
mypy_path = "src"
explicit_package_bases = true
warn_unused_ignores = false

# [[tool.mypy.overrides]]
# module = []
# ignore_missing_imports = true

[tool.pylint.messages_control]
ignore = ["setup.py", "__init__.py"]
disable = "all"
enable = [
    "empty-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
]

[tool.isort]
profile = "black"
known_first_party = ["ekglib"]

[tool.pytest.ini_options]
minversion = "6.0"
pythonpath = [".", "src"]
addopts = "-rA --doctest-modules --strict-markers --verbose --junitxml=junit/test-results.xml --cov-report=html --maxfail=2 --showlocals --tb=short --durations=5"
norecursedirs = ["build", "dist", "docs", "htmlcov", ".tox", ".vscode", ".idea", ".git", ".github", ".venv", ".mypy_cache", ".pytest_cache", ".ruff_cache", "junit"]
log_cli_level = "DEBUG"
log_cli = true
junit_family = "xunit1"
timeout = 10
testpaths = ["tests"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if TYPE_CHECKING"
]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they're not supposed to be run:"
    "@(abc\\.)?abstractmethod"
]

[tool.pyright]
include = ["src", "tests"]
exclude = [
    "**/node_modules", 
    "**/dist", 
    "**/build", 
    "**/htmlcov", 
    "**/docs", 
    "**/junit", 
    "**/coverage", 
    "**/.venv", 
    "**/.mypy_cache", 
    "**/.pytest_cache", 
    "**/.tox", 
    "**/.git",
    "**/.idea",
    "**/.vscode",
    "typings",
    "**/__pycache__",
]
ignore = []
stubPath = "typings"
venv = ".venv"
verboseOutput = true
reportMissingImports = "error"
reportMissingTypeStubs = false
reportMissingParameterType = false
pythonVersion = "3.12"
useLibraryCodeForTypes = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true

reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true

executionEnvironments = [{ root = "src", pythonPath = "src" }]

[tool.ruff.lint]
preview = true
extend-select = ["C901"]

[tool.ruff.lint.extend-per-file-ignores]
"docs/.hooks/*" = ["INP001", "T201"]

[tool.ruff.lint.isort]
known-first-party = ["foo", "bar"]

[tool.ruff.format]
preview = true
quote-style = "single"

[tool.hatch.version]
path = "src/ekglib/__about__.py"

[tool.hatch.build]
skip-excluded-dirs = true
sources = ["src"]
directory = "dist"

[tool.hatch.envs.hatch-static-analysis]
config-path = "ruff_defaults.toml"

[tool.hatch.envs.default]
# See https://hatch.pypa.io/1.12/how-to/environment/select-installer/
installer = "uv"

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs"
]

[tool.hatch.build.targets.wheel]
packages = ["src/ekglib"]
only-packages = true

[tool.hatch.build.targets.sdist]
packages = ["src/ekglib"]
include = ["src/ekglib/*.py", "tests/*.py", "typings/*.py"]
exclude = ["*.adoc", ".editorconfig"]
only-packages = true



